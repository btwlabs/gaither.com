<?php
// $Id$
/* TODO FormAPI image buttons are now supported.
   FormAPI now offers the 'image_button' element type, allowing developers to
   use icons or other custom images in place of traditional HTML submit buttons.

$form['my_image_button'] = array(
  '#type'         => 'image_button',
  '#title'        => t('My button'),
  '#return_value' => 'my_data',
  '#src'          => 'my/image/path.jpg',
); */

/* TODO New user_mail_tokens() method may be useful.
   user.module now provides a user_mail_tokens() function to return an array
   of the tokens available for the email notification messages it sends when
   accounts are created, activated, blocked, etc. Contributed modules that
   wish to make use of the same tokens for their own needs are encouraged
   to use this function. */

/* TODO
   There is a new hook_watchdog in core. This means that contributed modules
   can implement hook_watchdog to log Drupal events to custom destinations.
   Two core modules are included, dblog.module (formerly known as watchdog.module),
   and syslog.module. Other modules in contrib include an emaillog.module,
   included in the logging_alerts module. See syslog or emaillog for an
   example on how to implement hook_watchdog.
function example_watchdog($log = array()) {
  if ($log['severity'] == WATCHDOG_ALERT) {
    mysms_send($log['user']->uid,
      $log['type'],
      $log['message'],
      $log['variables'],
      $log['severity'],
      $log['referer'],
      $log['ip'],
      format_date($log['timestamp']));
  }
} */

/* TODO Implement the hook_theme registry. Combine all theme registry entries
   into one hook_theme function in each corresponding module file.
function uc_sage_payments_theme() {
  return array(
  );
} */

/**
 * @file
 * A module used for Sage Payments payment gateway - only.
 *
 * Developed by Chris Smith (http://www.musiccitynetworks.com | chris@musiccitynetworks.com).
 * and Sean Sellers (http://www.musiccitynetworks.com | sean@musiccitynetworks.com
 */

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

function uc_sage_payments_payment_gateway() {
  $gateways[] = array(
    'id' => 'sagepayments',
    'title' => t('Sage Payments'),
    'description' => t('Process credit card payments using the service of Sage Payments.'),
    'settings' => 'uc_sage_payments_settings_form',
    'credit' => 'uc_sage_payments_charge',
  );

  return $gateways;
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * Callback for payment gateway settings.
 */
	function uc_sage_payments_settings_form() {
  $form['sage_payments_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sage Payments settings'),
  );
  $form['sage_payments_settings']['m_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#default_value' => variable_get('m_id', ''),
    '#description' => t("Enter your Merchant ID assigned to you by Sage Payments."),
  );
  $form['sage_payments_settings']['&m_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Key'),
    '#default_value' => variable_get('&m_key', ''),
    '#description' => t('Enter your Merchant Key assigned to you by Sage Payments'),
  );
  
  return $form;
}

function uc_sage_payments_charge($order_id, $amount, $data) {

  if (!function_exists('curl_init')) {
    drupal_set_message(t('The Sage Payments service requires curl.  Please talk to your system administrator to get this configured.'));
    return array('success' => FALSE);
  }

  global $user, $res;
  $order = uc_order_load($order_id);
  $description = '';
  if (is_array($order->products)) {
    foreach ($order->products as $product) {
      if (!empty($description)) {
        $description .= ' // ';
      }
      $description .= $product->title .' x'. $product->qty;
      if ($product->data['attributes']) {
	foreach ($product->data['attributes'] as $key => $value) {
	  $description .= ', '. $key .': '. $value;
	}
      }
    }
  }
  $description = substr($description, 0, 255);
 

/*******************************************************************************
 * Convert some data before sending it to Sage Payments
 ******************************************************************************/
  $cardexpyr = $order->payment_details['cc_exp_year'];
 
	$mid = variable_get('m_id','');
	$mkey = variable_get('&m_key', '');

	$exp_month = $order->payment_details['cc_exp_month'];


	$month = sprintf("%02d",$exp_month);

	$year = substr($cardexpyr,2,2);

	$exp_Date = $month . $year;


/***
  
/*******************************************************************************
 * Start CURL Session
 ******************************************************************************/
//set the URL that will be posted to.
$eftsecure_url = "https://www.sagepayments.net/cgi-bin/eftbankcard.dll?transaction";
//make your query.

$data = "m_id=" . $mid; //your eftsecure merchant id.
$data .= "&m_key=" . $mkey; // your eftsecure merchant key;
$data .= "&T_amt=" . urlencode($amount); // The amount to be charged. Always encode

// any data given to you over the web. it is more
// secure and reliable.

$data .= "&C_name=" . urlencode($order->billing_first_name .' '. $order->billing_last_name);
$data .= "&C_address=" . urlencode($order->billing_street1 .' '. $order->billing_street2);
$data .= "&C_state=" . urlencode(uc_get_zone_code($order->billing_zone));
$data .= "&C_city=" . urlencode($order->billing_city);
//$data .= "&C_country=" . urlencode($order->billing_country_name);
$data .= "&C_cardnumber=" . urlencode($order->payment_details['cc_number']);
$data .= "&C_exp=" . urlencode($exp_Date);
$data .= "&C_cvv=" . urlencode($order->payment_details['cc_cvv']);
$data .= "&C_zip=" . urlencode($order->billing_postal_code);
$data .= "&C_email=" . urlencode($order->primary_email);
$data .= "&C_telephone=" . urlencode($order->billing_phone);
$data .= "&T_ordernum=" . urlencode($order_id);
$data .= "&T_code=01"; // transaction type indicator

//HTTPS Bankcard Specifications 18
//now we will make the transaction. the first method is the preferred internal method
//using the built in CURL functions.


$ch = curl_init(); //initialize the CURL library.
curl_setopt($ch, CURLOPT_URL, $eftsecure_url); // set the URL to post to.
curl_setopt($ch, CURLOPT_POST, 1); // tell it to POST not GET (you can GET but POST is
//preferred)
curl_setopt($ch, CURLOPT_POSTFIELDS, $data); // set the data to be posted.
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); // this tells the library to return the
// data to you instead of writing it to
// a file

$res = curl_exec($ch); // make the post.

curl_close($ch); // shut down the curl library.

// once you have the response then you need to parse its different components.

$approval_indicator = $res[1];
$approval_error_code = substr($res, 2, 6);
$front_end_indicator = substr($res, 40, 2);
$cvv_indicator = $res[42];
$avs_indicator = $res[43];
$risk_indicator = substr($res, 46, 10);
$reference = substr($res, 46, 10);
$order_number = substr($res, strpos($res, chr(28)) + 1,strrpos($res, chr(28) - 1));

    $x_response_text = $retarr['r_error'];
  
  if ($approval_indicator != 'A') {
	  $message = t('Credit card declined: !amount', array('!amount' => uc_currency_format($amount)));
	  
    $result = array(
      'success' => FALSE,
      'comment' => t('Credit card payment declined: !text', array('!text' => $x_response_text)),
      'message' => t('Credit card payment declined: !text', array('!text' => $x_response_text)),
      'uid' => $user->uid,
    );
    
  }
  else {
    $message = t('Credit card charged: !amount', array('!amount' => uc_currency_format($amount)));
    $result = array(
      'success' => TRUE,
      'comment' => t('Credit card payment processed successfully. Approval code: !code', array('!code' => $approved_text)),
      'message' => t('Credit card payment processed successfully. Approval code: !code', array('!code' => $approved_text)),
      'uid' => $user->uid,
    );
  }
  uc_order_comment_save($order_id, $user->uid, $message, 'admin');
  return $result;
}  
