<?php
// $Id$

/**
 * @file
 * Emma API module.
 *
 * @author Bob Marchman
 * @date 07/07/2010
 */





/**
 * Implementation of hook_perm().
 */
function emma_perm() {
  return array('administer emma settings', 'administer emma mailing lists');
}





/**
 * Implementation of hook_menu().
 */
function emma_menu() {
  $items = array();
  
  $items['admin/emma'] = array(
    'title' => 'Emma',
    'description' => 'Configure settings for Emma',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emma_admin_settings_form'),
    'access arguments' => array('administer emma settings'),
    'file' => 'includes/emma.admin.inc',
    'menu_name' => 'emma',
  );
  
  $items['admin/emma/settings'] = array(
    'title' => 'Emma Settings',
    'description' => 'Configure settings for Emma',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emma_admin_settings_form'),
    'access arguments' => array('administer emma settings'),
    'file' => 'includes/emma.admin.inc',
    'menu_name' => 'emma',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );  
    
  $items['admin/emma/lists'] = array(
    'title' => 'Emma Mailing Lists',
    'description' => "Manage your site's Emma mailing lists.",
    'page callback' => 'emma_show_lists',
    'access arguments' => array('administer emma mailing lists'),
    'file' => 'includes/emma.api.inc',
    'menu_name' => 'emma',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/emma/lists/add'] = array(
    'title' => 'Add a New Mailing List',
    'description' => "Add a New Emma Mailing List.",
    'page callback' => 'emma_edit_list',
    'access arguments' => array('administer emma mailing lists'),
    'file' => 'includes/emma.api.inc',
    'menu_name' => 'emma',
    'type' => MENU_LOCAL_TASK,        
  );
  
  $items['admin/emma/lists/edit/%emma_list'] = array(
    'title' => 'Edit Existing Mailing List',
    'description' => "Edit an Existing Emma Mailing List.",
    'page callback' => 'emma_edit_list',
    'page arguments' => array(4),
    'access arguments' => array('administer emma mailing lists'),
    'file' => 'includes/emma.api.inc',
    'menu_name' => 'emma',    
  );
  
  $items['admin/emma/lists/delete/%'] = array(
    'title' => 'Delete Existing Mailing List',
    'description' => "Delete an Existing Emma Mailing List.",
    'page callback' => 'emma_delete_list',
    'page arguments' => array(4),
    'access arguments' => array('administer emma mailing lists'),
    'file' => 'includes/emma.api.inc',
    'type' => MENU_CALLBACK,
    'menu_name' => 'emma',    
  );
  
  $items['admin/emma/lists/content-types'] = array(
    'title' => 'Configure subscription fields',
    'description' => 'Map CCK fields to Emma subscription fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emma_content_fields_form'),
    'access arguments' => array('administer emma settings'),
    'file' => 'includes/emma.admin.inc',
    'menu_name' => 'emma',
    'type' => MENU_LOCAL_TASK,        
  );  

  $items['admin/emma/users'] = array(
    'title' => 'Emma Subscribers',
    'description' => "Manage your site's Emma subscribers.",
    'page callback' => 'emma_list_subscribers',
    'page arguments' => array(4),
    'access arguments' => array('administer emma mailing lists'),
    'file' => 'includes/emma.api.inc',
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'emma',
    'weight' => 2,    
  );
  
  $items['admin/emma/users/import'] = array(
    'title' => 'Import Subscribers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emma_user_import_form'),
    'access arguments' => array('administer emma mailing lists'),
    'file' => 'includes/emma.admin.inc',
    'type' => MENU_LOCAL_TASK,    
    'menu_name' => 'emma',
    'weight' => 3,        
  );    
  
/*
  $items['admin/emma/users/bulk-update'] = array(
    'title' => 'Bulk Update Existing Users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emma_bulk_update_form'),
    'access arguments' => array('administer emma mailing lists'),
    'file' => 'includes/emma.admin.inc',
    'type' => MENU_LOCAL_TASK,    
    'menu_name' => 'emma',
    'weight' => 4,    
  );
*/
  
/*
  $items['admin/emma/test'] = array(
    'title' => 'Test Post Parameters',
    'page callback' => 'emma_add_to_expired',
    'page arguments' => array(4),
    'access arguments' => array('administer emma mailing lists'),
    'menu_name' => 'emma',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );  
*/  

  return $items;
}





/**
 * Implementation of hook_theme().
 */
function emma_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'emma') .'/theme';
  
  return array(
    'emma_show_subscribers' => array(
      'arguments' => array('group_id' => NULL),
      'file' => 'emma.theme.inc',
      'path' => $path,
    ),
    'emma_mailing_lists' => array(
      'arguments' => array(NULL),
      'file' => 'emma.theme.inc',
      'path' => $path,      
    ),
  );
}





/**
 * Implementation of hook_user().
 */
function emma_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'register':
      module_load_include('inc', 'emma', 'includes/emma.api');
      // show form fields for any lists assigned to be displayed on registration form
      $form['emma_subscribe'] = array(
        '#type' => 'fieldset',
        '#title' => t('Subscribe To Email Updates'),
        '#weight' => 10,     
      );
      
      // get all lists assigned to be displayed on registration
      $options = emma_get_registration_lists();
      
      $defaults = array();
      
      foreach ($options as $group_id => $list_name) {
        $is_default = variable_get('emma_list_'. $group_id .'_default_value', FALSE);
        
        if ($is_default) {
          $defaults[] = $group_id;
        }
      }
            
      $form['emma_subscribe']['subscribe'] = array(
        '#type' => 'checkboxes',
        '#title' => 'Choose which email updates you wish to subscribe to',
        '#options' => $options,
        '#default_value' => $defaults,
      );
      
      return $form;      
      break;

      
    case 'insert':      
      module_load_include('inc', 'emma', 'includes/emma.api');
      // check for list subscriptions in emma_users table and update uid as applicable
      emma_new_user_update($account);
      
      // check for opt-ins from registration form and subscribe
      foreach ($edit['subscribe'] as $list) {
        $group = emma_list_load($list);
        
        $response = _emma_add_to_group($account->uid, $group->group_id);
                
        if (!$response) {
          $response_message = emma_get_response($response);        
          watchdog('emma', 'UID: %uid | List: %list [Emma Response: %response]', array('%uid' => $account->uid, '%list' => $group->list_name, '%response' => $response_message), WATCHDOG_ERROR);
        }
      }

      break;

      
    case 'update':
      module_load_include('inc', 'emma', 'includes/emma.api');
      // update profile fields for each subscribed list
      $responses = _emma_update_user_profile($account->uid);
      
      foreach ($responses as $response) {
        if (!$response) {
          $response_message = emma_get_response($response);
          watchdog('emma', 'UID: %uid [Emma Response: %response]', array('%uid' => $account->uid, '%response' => $response_message), WATCHDOG_ERROR);
        }
      }
      break;

      
    case 'delete':
      module_load_include('inc', 'emma', 'includes/emma.api');
      // set uid = 0 for each subscribed list in emma_users table
      emma_reset_user($account);
      break;

      
    case 'load':
      module_load_include('inc', 'emma', 'includes/emma.api');
      // attach subscribed lists to $user object
      $lists = _emma_get_lists_by_uid($account->uid);
      $account->emma_lists = $lists;      
      break;

      
    case 'login':
      module_load_include('inc', 'emma', 'includes/emma.api');    
      // check for subscribed lists in emma_users table and update uid as applicable
      emma_new_user_update($account);
      break;
  }
}





/**
 * Implementation of hook_form_alter().
 */
function emma_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id) {
    if ($form['#node']->type == 'uprofile') {
      $form['#submit'][] = '_emma_user_profile_submit';
    }
  }
}





/**
 * Custom submit handler for user profile node edit form.
 */
function _emma_user_profile_submit($form, &$form_state) {
  $uid = $form_state['values']['uid'];
  
  module_load_include('inc', 'emma', 'includes/emma.api');
  // update profile fields for each subscribed list
  $responses = _emma_update_user_profile($uid);
  
  foreach ($responses as $response) {
    if (!$response) {
      $response_message = emma_get_response($response);
      watchdog('emma', 'UID: %uid [Emma Response: %response]', array('%uid' => $uid, '%response' => $response_message), WATCHDOG_ERROR);
    }
  }  
}




/**
 * Retrieve a Emma mailing list for a given group.
 *
 * @param $group_id
 *   The group id for the mailing list.
 *
 * @return
 *   An object representing the stored mailing list data, or FALSE otherwise.
 */
function emma_list_load($group_id) {
  if (empty($group_id) || !is_numeric($group_id)) {
    return FALSE;
  }
  
  $list = db_fetch_object(db_query('SELECT m.* FROM {emma} m WHERE m.group_id = %d', $group_id));
  
  return $list;
}